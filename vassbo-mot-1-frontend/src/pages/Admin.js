import React, {useState, useContext} from 'react';import {GameContext} from '../context/GameContext';import './Admin.css';import AdminGameMode from '../components/AdminGameMode';import {useNavigate} from "react-router-dom";const Admin = () => {	const {createGame, addQuestion, startGame, games, updateQuestion} = useContext(GameContext);	const [title, setTitle] = useState('');	const [gameCode, setGameCode] = useState('');	const [question, setQuestion] = useState('');	const [rangeMin, setRangeMin] = useState('');	const [rangeMax, setRangeMax] = useState('');	const [error, setError] = useState('');	const [successMessage, setSuccessMessage] = useState('');	const [showQuestions, setShowQuestions] = useState(true);	const [editIndex, setEditIndex] = useState(null);	const [editedQuestion, setEditedQuestion] = useState({text: '', rangeMin: '', rangeMax: ''});	const navigate = useNavigate();	const handleCreateGame = async () => {		if (!title.trim()) {			setError('Konkurransenavn kan ikke være tomt.');			return;		}		try {			const newGame = await createGame(title);			setGameCode(newGame.gameCode);			setTitle('');			setError('');			setSuccessMessage(`Spill "${newGame.title}" opprettet! Spillkoden er ${newGame.gameCode}.`);		} catch (err) {			setError('Feil ved opprettelse av spill.');			setSuccessMessage('');		}	};	const handleAddQuestion = async () => {		if (!question.trim()) {			setError('Spørsmål kan ikke være tomt.');			return;		}		const min = Number(rangeMin);		const max = Number(rangeMax);		if (isNaN(min) || isNaN(max) || min >= max) {			setError('Vennligst oppgi gyldig range (min < max).');			return;		}		const newQuestion = {			text: question,			range: [min, max],		};		try {			await addQuestion(gameCode, newQuestion);			setQuestion('');			setRangeMin('');			setRangeMax('');			setError('');			setSuccessMessage('Spørsmål lagt til!');		} catch (err) {			setError('Feil ved tillegg av spørsmål.');			setSuccessMessage('');		}	};	const handleStartGame = async () => {		const currentGame = games[gameCode];		if (!currentGame || currentGame.players.length < 2 || currentGame.questions.length < 1) {			setError('Spillet må ha minst to spillere og ett spørsmål.');			return;		}		try {			await startGame(gameCode);			setError('');			setSuccessMessage('Spillet har startet! Navigerer til spillmodus...');			setTimeout(() => {				navigate(`/admin/flow/${gameCode}`);			}, 1500);		} catch (err) {			setError('Feil ved oppstart av spill.');		}	};	const handleEditQuestion = (index) => {		const currentGame = games[gameCode];		if (!currentGame || !currentGame.questions[index]) return;		const questionToEdit = currentGame.questions[index];		setEditIndex(index);		setEditedQuestion({			text: questionToEdit.text,			rangeMin: questionToEdit.range[0],			rangeMax: questionToEdit.range[1],		});	};	const handleSaveEditedQuestion = async () => {		try {			const min = Number(editedQuestion.rangeMin);			const max = Number(editedQuestion.rangeMax);			if (isNaN(min) || isNaN(max) || min >= max) {				setError('Vennligst oppgi gyldig range (min < max).');				return;			}			const updatedQuestion = {				text: editedQuestion.text,				range: [min, max],			};			await updateQuestion(gameCode, editIndex, updatedQuestion);			setEditIndex(null);			setEditedQuestion({text: '', rangeMin: '', rangeMax: ''});			setError('');			setSuccessMessage('Spørsmål oppdatert!');		} catch (err) {			setError('Feil ved oppdatering av spørsmål.');			setSuccessMessage('');		}	};	const currentGame = games[gameCode];	return (		<div className="admin-container">			<h2>Admin Dashboard</h2>			{/* Opprett spill */}			<div className="create-game-section">				{!gameCode ? (					<>						<input							type="text"							placeholder="Konkurransenavn"							value={title}							onChange={(e) => setTitle(e.target.value)}						/>						<button onClick={handleCreateGame}>Opprett Spill</button>					</>				) : (					currentGame ? (						<div>							<h3>{currentGame.title}</h3>							<p><strong>Spillkode:</strong> {gameCode}</p>						</div>					) : (						<p><strong>Spillnavn:</strong> Laster...</p>					)				)}			</div>			{/* Spørsmål-seksjon */}			{gameCode && currentGame && currentGame.questions && (				<div className="questions-section">					<h3>Spørsmål ({currentGame.questions.length})</h3>					<button onClick={() => setShowQuestions((prev) => !prev)}>						{showQuestions ? 'Skjul Spørsmål' : 'Vis Spørsmål'}					</button>					{showQuestions && (						<div>							{/* Spørsmålsliste */}							<ul className="questions-list">								{currentGame.questions.map((q, index) => (									<li key={index}>										{editIndex === index ? (											<>												<input													type="text"													value={editedQuestion.text}													onChange={(e) =>														setEditedQuestion({															...editedQuestion,															text: e.target.value														})													}													placeholder="Oppdatert spørsmålstekst"												/>												<input													type="number"													value={editedQuestion.rangeMin}													onChange={(e) =>														setEditedQuestion({															...editedQuestion,															rangeMin: e.target.value														})													}													placeholder="Min verdi"												/>												<input													type="number"													value={editedQuestion.rangeMax}													onChange={(e) =>														setEditedQuestion({															...editedQuestion,															rangeMax: e.target.value														})													}													placeholder="Max verdi"												/>												<button onClick={handleSaveEditedQuestion}>Lagre</button>												<button onClick={() => setEditIndex(null)}>Avbryt</button>											</>										) : (											<>												{q.text} {q.range ? `(${q.range[0]} - ${q.range[1]})` : ''}												<button onClick={() => handleEditQuestion(index)}>Rediger</button>											</>										)}									</li>								))}							</ul>							{/* Legg til nytt spørsmål */}							<div className="add-question-section">								<h4>Legg til Spørsmål</h4>								<input									type="text"									placeholder="Spørsmål"									value={question}									onChange={(e) => setQuestion(e.target.value)}								/>								<div className="range-inputs">									<input										type="number"										placeholder="Min verdi"										value={rangeMin}										onChange={(e) => setRangeMin(e.target.value)}									/>									<input										type="number"										placeholder="Max verdi"										value={rangeMax}										onChange={(e) => setRangeMax(e.target.value)}									/>								</div>								<button onClick={handleAddQuestion}>Legg til Spørsmål</button>							</div>						</div>					)}				</div>			)}			{/* Deltakerliste (alltid synlig hvis vi har et currentGame) */}			{currentGame && currentGame.players && (				<div className="players-section">					<h3>Spillere ({currentGame.players.length})</h3>					{currentGame.players.length === 0 ? (						<p>Ingen spillere har blitt med enda.</p>					) : (						<ul>							{currentGame.players.map((player, index) => (								<li key={index}>{player.name}</li>							))}						</ul>					)}				</div>			)}			{gameCode && currentGame && (				<div className="start-game-section">					<h3>Start Spill</h3>					<button						onClick={handleStartGame}						disabled={currentGame.players.length === 0 || currentGame.questions.length === 0} // Knappen er inaktiv hvis ingen spillere har blitt med					>						Start Spill					</button>					{currentGame.players.length === 0 && (						<p className="warning-message">Minst én spiller må bli med før spillet kan startes.</p>					)}				</div>			)}			{/* Feil- og suksessmeldinger */}			{error && <p className="error-message">{error}</p>}			{successMessage && <p className="success-message">{successMessage}</p>}		</div>	);};export default Admin;