// vassbo-mot-1-frontend/src/pages/Admin.jsimport React, {useState, useContext} from 'react';import {GameContext} from '../context/GameContext';import './Admin.css';const Admin = () => {	const {createGame, addQuestion, startGame, games} = useContext(GameContext);	const [title, setTitle] = useState('');	const [gameCode, setGameCode] = useState('');	const [question, setQuestion] = useState('');	const [rangeMin, setRangeMin] = useState('');	const [rangeMax, setRangeMax] = useState('');	const [useSlider, setUseSlider] = useState(false);	const [error, setError] = useState('');	const [successMessage, setSuccessMessage] = useState('');	const handleCreateGame = async () => {		if (!title.trim()) {			setError('Konkurransenavn kan ikke være tomt.');			return;		}		try {			const newGame = await createGame(title);			setGameCode(newGame.gameCode);			setTitle('');			setError('');			setSuccessMessage(`Spill "${newGame.title}" opprettet! Spillkoden er ${newGame.gameCode}.`);			// `games`-staten oppdateres via 'updateGame' hendelsen		} catch (err) {			setError('Feil ved opprettelse av spill.');			setSuccessMessage('');		}	};	const handleAddQuestion = async () => {		if (!question.trim()) {			setError('Spørsmål kan ikke være tomt.');			return;		}		let range = null;		if (useSlider) {			const min = Number(rangeMin);			const max = Number(rangeMax);			if (isNaN(min) || isNaN(max) || min >= max) {				setError('Vennligst oppgi gyldig range (min < max).');				return;			}			range = [min, max];		}		const newQuestion = {			text: question,			range, // [min, max] eller null			useSlider,		};		try {			await addQuestion(gameCode, newQuestion);			setQuestion('');			setRangeMin('');			setRangeMax('');			setUseSlider(false);			setError('');			setSuccessMessage('Spørsmål lagt til!');		} catch (err) {			setError('Feil ved tillegg av spørsmål.');			setSuccessMessage('');		}	};	const handleStartGame = async () => {		try {			const response = await startGame(gameCode);			setError('');			setSuccessMessage('Spillet har startet!');			// Spillkoden vises allerede, du kan legge til ytterligere feedback her om ønskelig		} catch (err) {			setError('Feil ved oppstart av spill.');			setSuccessMessage('');		}	};	const currentGame = games[gameCode];	return (		<div className="admin-container">			<h2>Admin Dashboard</h2>			{/* Opprett nytt spill eller vis spillnavn */}			<div className="create-game-section">				<h3>Opprett Nytt Spill</h3>				{!gameCode ? (					<>						<input							type="text"							placeholder="Konkurransenavn"							value={title}							onChange={(e) => setTitle(e.target.value)}						/>						<button onClick={handleCreateGame}>Opprett Spill</button>					</>				) : (					currentGame ? (						<p><strong>Spillnavn:</strong> {currentGame.title}</p>					) : (						<p><strong>Spillnavn:</strong> Laster...</p>					)				)}			</div>			{/* Vis spillkode */}			{gameCode && (				<div className="game-code-section">					<p><strong>Spillkode:</strong> {gameCode}</p>				</div>			)}			{/* Legg til spørsmål */}			{gameCode && currentGame && (				<div className="add-question-section">					<h3>Legg til Spørsmål</h3>					<input						type="text"						placeholder="Spørsmål"						value={question}						onChange={(e) => setQuestion(e.target.value)}					/>					<div className="range-toggle">						<label>							<input								type="checkbox"								checked={useSlider}								onChange={(e) => setUseSlider(e.target.checked)}							/>							Bruk Slider for svar						</label>					</div>					{useSlider && (						<div className="range-inputs">							<input								type="number"								placeholder="Min verdi"								value={rangeMin}								onChange={(e) => setRangeMin(e.target.value)}							/>							<input								type="number"								placeholder="Max verdi"								value={rangeMax}								onChange={(e) => setRangeMax(e.target.value)}							/>						</div>					)}					<button onClick={handleAddQuestion}>Legg til Spørsmål</button>				</div>			)}			{/* Vis spørsmål */}			{currentGame && currentGame.questions && currentGame.questions.length > 0 && (				<div className="questions-list">					<h3>Spørsmål</h3>					<ul>						{currentGame.questions.map((q, index) => (							<li key={index}>								{q.text} {q.useSlider && q.range ? `(Range: ${q.range[0]} - ${q.range[1]})` : ''}							</li>						))}					</ul>				</div>			)}			{/* Vis deltakere */}			{currentGame && currentGame.players && (				<div className="players-list">					<h3>Deltakere</h3>					<ul>						{currentGame.players.map((player, index) => (							<li key={index}>{player.name}</li>						))}					</ul>				</div>			)}			{gameCode && currentGame && (				<div className="start-game-section">					<button						onClick={handleStartGame}						disabled={							currentGame.players.length < 2 || // Minimum antall spillere							currentGame.questions.length < 1 || // Minimum antall spørsmål							currentGame.status !== 'created' // Kun mulig å starte hvis status er 'created'						}					>						Start Spill					</button>				</div>			)}			{/* Feilmeldinger og suksessmeldinger */}			{error && <p className="error-message">{error}</p>}			{successMessage && <p className="success-message">{successMessage}</p>}		</div>	);};export default Admin;